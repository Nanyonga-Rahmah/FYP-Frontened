import React from "react";
import { useRef } from "react";
import { Button } from "@/components/ui/button";
import { useReactToPrint } from "react-to-print";

function DeforestationAssessmentReport() {
  const printRef = useRef<HTMLDivElement | null>(null);

  const handlePrint = useReactToPrint({
    content: () => printRef.current,
    documentTitle: "Deforestation_Assessment_Report",
    removeAfterPrint: true,
  } as Parameters<typeof useReactToPrint>[0]);

  return (
    <div className="bg-gray-100 min-h-screen py-4">
      <div
        id="deforestation-report-pdf"
        ref={printRef}
        className="bg-white w-[595px] h-[900px] mx-auto py-4 px-6 overflow-auto shadow  text-[10px] text-[#212121] font-sans"
      >

        {/* Header */}
        <div className="text-center my-6">
          <h1 className="text-[22px] font-bold text-[#0F2A38] uppercase tracking-wide">
            Deforestation Assessment Report
          </h1>
          <p className="text-[14px] text-gray-700">
            for consignment CONS-248-X89
          </p>
        </div>

        {/* A. Operator Info */}
        <Section title="A. Operator Info">
          <FlexRow label="User ID" value="UI89" />
          <FlexRow label="Name" value="Coffee World Exporters Ltd" />
          <FlexRow label="Address" value="Nakawa, Kampala, Uganda" />
          <FlexRow label="Email" value="coffeewld@gmail.com" />
          <FlexRow label="UCDA Export permit number" value="UCDA/EXP/0653/2025" />
        </Section>


        {/* B. Consignment Overview */}
        <Section title="B. Consignment Overview">
          <FlexRow label="Consignment ID" value="CONS-248-X89" />
          <FlexRow label="Product type" value="Green Coffee beans" />
          <FlexRow label="HS Code" value="0901.11 – Coffee, not roasted, not decaffeinated" />
          <FlexRow label="Trade Name" value="Uganda Robusta, Screen 16" />
          <FlexRow label="Export Volume" value="4000kg" />
          <FlexRow label="Country of production" value="Uganda" />
          <FlexRow label="Destination country" value="Rotterdam, Netherlands" />
          <FlexRow label="Export date" value="May 3, 2027" />
          <FlexRow label="Batches" value="4000" />
          <FlexRow label="Shipping details" value="Container #ABC123, Via Mombasa, Vessel: MSC Eagle" />
        </Section>

        {/* C. Deforestation Status */}
        <Section title="C. Deforestation status">
          <FlexRow label="Country of production" value="Uganda" />
          <FlexRow label="Farms" value="80" />
          <StyledTable
            headers={[
              "Farm name",
              "Farm geolocation",
              "Address",
              "Deforestation status",
              "Last checked",
            ]}
            rows={[
              [
                "Mary’s Farm",
                "1.234567, 32.567890\n1.234567, 32.567890",
                "Kampala",
                <Pill text="Deforestation-free" color="green" />,
                "Nov 30, 2026",
              ],
              [
                "Mary’s Farm",
                "1.234567, 32.567890\n1.234567, 32.567890",
                "Kampala",
                <Pill text="Deforestation-free" color="green" />,
                "Nov 30, 2026",
              ],
              [
                "Mary’s Farm",
                "1.234567, 32.567890\n1.234567, 32.567890",
                "Kampala",
                <Pill text="Affected" color="red" />,
                "Nov 30, 2026",
              ],
            ]}
          />
        </Section>

        {/* D. Deforestation Risk */}
        <Section title="D. Deforestation risk">
          <StyledTable
            headers={[
              "Farm name",
              "Address",
              "Deforestation risk level",
              "Risk factors",
            ]}
            rows={[
              [
                "Mary’s Farm",
                "Kampala",
                <Pill text="High risk" color="green" />,
                "Close to an area of deforestation",
              ],
              [
                "Mary’s Farm",
                "Kampala",
                <Pill text="Low risk" color="red" />,
                "No recent deforestation nearby",
              ],
              [
                "Mary’s Farm",
                "Kampala",
                <Pill text="Mid risk" color="yellow" />,
                "Close to an area of deforestation",
              ],
            ]}
          />
          <p className="text-[9px] italic text-gray-600 mt-2">
            Data is stored on blockchain. Immutable records, 5-year retention,
            per EUDR Article 12.
          </p>
        </Section>

        {/* Footer */}
        <p className="text-center text-[8px] italic text-gray-500 mt-4">
          Generated by Coffichain Traceability Solution
        </p>
      </div>

      <div className="flex justify-center mt-4 print:hidden">
        <Button className="bg-[#0F2A38] text-white" onClick={handlePrint}>
          Download as PDF
        </Button>
      </div>
    </div>
  );
}

export default DeforestationAssessmentReport;

// Components

const Section = ({
  title,
  children,
}: {
  title: string;
  children: React.ReactNode;
}) => (
  <section className="mb-4">
    <h2 className="font-bold text-[#0F2A38] text-[13px] mb-1">{title}</h2>
    <div>{children}</div>
  </section>
);

const FlexRow = ({ label, value }: { label: string; value: string }) => (
  <div className="flex justify-between my-1">
    <span className="font-semibold">{label}</span>
    <span className="text-right">{value}</span>
  </div>
);

const Pill = ({ text, color }: { text: string; color: string }) => {
  const colorMap: Record<string, string> = {
    green: "bg-green-500 text-white",
    red: "bg-red-500 text-white",
    yellow: "bg-yellow-400 text-black",
  };

  return (
    <span
      className={`inline-flex items-center justify-center px-2 pb-2 text-[9px] rounded-full text-xs font-semibold ${colorMap[color]}`}
    >
      {text}
    </span>
  );
};

const StyledTable = ({
  headers,
  rows,
}: {
  headers: string[];
  rows: (string | JSX.Element)[][];
}) => (
  <table className="w-full border border-gray-300 rounded text-[10px] mt-2">
    <thead className="bg-gray-100">
      <tr>
        {headers.map((header, i) => (
          <th key={i} className="border px-2 py-1 text-left">
            {header}
          </th>
        ))}
      </tr>
    </thead>
    <tbody>
      {rows.map((row, i) => (
        <tr key={i}>
          {row.map((cell, j) => (
            <td key={j} className="border px-2 py-1 whitespace-pre-wrap">
              {cell}
            </td>
          ))}
        </tr>
      ))}
    </tbody>
  </table>
);
